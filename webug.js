// Generated by CoffeeScript 1.10.0
(function() {
  (function(win, doc) {
    "user strict";
    var Stack, Webug, webug;
    Stack = (function() {
      function Stack() {
        this.data = [];
        this.index = 0;
      }

      Stack.prototype.push = function(msg) {
        this.data.push(msg);
        return this.index = this.data.length - 1;
      };

      Stack.prototype.up = function() {
        if (this.index !== 0) {
          return this.data[--this.index];
        } else {
          return this.data[this.index];
        }
      };

      Stack.prototype.down = function() {
        if (this.index !== (this.data.length - 1)) {
          return this.data[++this.index];
        } else {
          return this.data[this.index];
        }
      };

      return Stack;

    })();
    Webug = (function() {
      var HTML, STYLE, UNDEFINED, append, bind, dom, getBody, isArray, isNull, isNumber, isObejct, render, unbind;

      STYLE = '.webug-container { position: fixed; bottom: 0; left: 0; width: 100%; height: 200px; font-color: #000; font-size: 16px; margin: 5px; padding: 5px; border-top: 3px solid #eeefee; overflow-y: scroll; } .webug-command { padding: 5px 0; } .webug-command::before { content: ">"; color: rgb(53, 131, 252); font-weight: bold; display: inline-block; margin-right: 5px; } .webug-information { margin: 0; padding: 0; } .webug-echo { font-size: 16px; padding: 5px 0; border-bottom: 1px solid #eeefee; list-style: none; } .webug-echo::before { content: ">"; color: rgb(133, 149, 173); font-weight: bold; display: inline-block; margin-right: 5px; } .webug-true { font-color: #066; border-bottom: 1px solid #eeefee; padding: 5px 12px; list-style: none; } .webug-error { color: #E81D20; border-bottom: 1px solid #eeefee; padding: 5px 12px; list-style: none; } .webug-error::before { content: "error: "; } .webug-edit { width: 80%; font-size: 16px; border: none; outline: none; } .webug-clear { position: fixed; bottom: 10px; right: 10px; padding: 2px 5px; }';

      HTML = '<div id="webug-container" class="webug-container"> <ul id="webug-content" class="webug-information"> </ul> <div class="webug-command"> <input id="webug-input" class="webug-edit"/> </div> <button id="webug-btn-clear" class="webug-clear">Clear</button> </div>';

      UNDEFINED = void 0;

      dom = function(ele) {
        return doc.querySelector(ele);
      };

      bind = function(ele, event, callback) {
        return ele.addEventListener(event, callback, false);
      };

      unbind = function(ele, event, callback) {
        return ele.removeEventListener(event, callback, false);
      };

      isNull = function(val) {
        return val === null;
      };

      isArray = Array.isArray;

      isNumber = function(val) {
        return !isNaN(val);
      };

      isObejct = function(val) {
        return typeof val === "object" && !isArray(val) && !isNull(val);
      };

      getBody = function() {
        return doc.body || dom("body") || dom("html");
      };

      render = function(msg, console) {
        var error, error1;
        if (msg === '') {
          return UNDEFINED;
        } else {
          if (console == null) {
            append('echo', msg);
          }
          try {
            return ['true', eval.call(window, msg)];
          } catch (error1) {
            error = error1;
            return ['error', error];
          }
        }
      };

      append = function(trueOrErr, value) {
        var li;
        li = doc.createElement('li');
        li.setAttribute('class', 'webug-' + trueOrErr);
        li.innerHTML = value;
        return dom("#webug-content").appendChild(li);
      };

      Webug.prototype.clear = function() {
        return this.content.innerHTML = '';
      };

      Webug.prototype.show = function() {
        this.isHide = false;
        this.container.setAttribute('style', 'display: block');
        return this;
      };

      Webug.prototype.hide = function() {
        this.isHide = true;
        this.container.setAttribute('style', 'display: none');
        return this;
      };

      Webug.prototype.errListener = function(error) {
        var msg;
        return msg = ["Error:", "filename: " + error.filename, "lineno: " + error.lineno, "message: " + error.message, "type: " + error.type];
      };

      function Webug() {
        this.isInit = this.isHide = false;
        this.msg = '';
        this.body = getBody();
        this.stack = new Stack();
        this.init();
      }

      Webug.prototype.init = function() {
        var css, div;
        css = doc.createElement('style');
        css.innerHTML = STYLE;
        div = doc.createElement('div');
        div.innerHTML = HTML;
        this.body.appendChild(css);
        this.body.appendChild(div);
        this.btn = dom("#webug-btn-clear");
        this.input = dom("#webug-input");
        this.content = dom('#webug-content');
        this.container = dom('#webug-container');
        bind(this.btn, 'click', (function(_this) {
          return function() {
            return _this.clear();
          };
        })(this));
        bind(this.input, 'keydown', (function(_this) {
          return function(e) {
            var data;
            if (e.keyCode === 13) {
              _this.msg = _this.input.value;
              _this.stack.push(_this.msg);
              data = render(_this.msg);
              return append(data[0], data[1]);
            } else if (e.keyCode === 38) {
              return _this.input.value = _this.stack.up();
            } else if (e.keyCode === 40) {
              return _this.input.value = _this.stack.down();
            }
          };
        })(this));
        bind(this.body, 'keydown', (function(_this) {
          return function(e) {
            if (e.keyCode === 88 && e.ctrlKey) {
              if (_this.isHide) {
                return _this.show();
              } else {
                return _this.hide();
              }
            }
          };
        })(this));
        bind(win, 'error', (function(_this) {
          return function(e) {
            return _this.errListener(e);
          };
        })(this));
        win.console.log = function(val) {
          var data;
          data = render(val, true);
          append(data[0], data[1]);
        };
        this.isInit = true;
        return this;
      };

      return Webug;

    })();
    return webug = new Webug();
  })(window, document);

}).call(this);

//# sourceMappingURL=webug.js.map
