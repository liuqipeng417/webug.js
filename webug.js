// Generated by CoffeeScript 1.10.0
(function() {
  (function(win, doc) {
    "user strict";
    var Stack, Webug;
    (function() {
      var bt, css, jq;
      css = doc.createElement('link');
      jq = doc.createElement('script');
      bt = doc.createElement('script');
      css.setAttribute('rel', 'styleSheet');
      css.setAttribute('href', 'bootstrap/css/bootstrap.min.css');
      jq.src = 'jquery-1.11.3.min.js';
      jq.onload = jq.readyreadystatechange = function() {
        if (!jq.readyState || /loaded|complete/.test(jq.readyState)) {
          console.log('jq ok');
          return doc.body.appendChild(bt);
        }
      };
      bt.src = 'bootstrap/js/bootstrap.min.js';
      bt.onload = bt.readyreadystatechange = function() {
        var webug;
        if (!bt.readyState || /loaded|complete/.test(bt.readyState)) {
          console.log('load ok');
          bt.onload = bt.readystatechange = null;
          return webug = new Webug;
        }
      };
      doc.body.appendChild(css);
      return doc.body.appendChild(jq);
    })();
    Stack = (function() {
      function Stack() {
        this.data = [];
        this.index = 0;
      }

      Stack.prototype.push = function(msg) {
        this.data.push(msg);
        return this.index = this.data.length - 1;
      };

      Stack.prototype.up = function() {
        if (this.index !== 0) {
          return this.data[--this.index];
        } else {
          return this.data[this.index];
        }
      };

      Stack.prototype.down = function() {
        if (this.index !== (this.data.length - 1)) {
          return this.data[++this.index];
        } else {
          return this.data[this.index];
        }
      };

      return Stack;

    })();
    return Webug = (function() {
      var CHANGE, CLICK, ERROR, HTML, INPUT, KEYDOWN, TRUE, UNDEFINED, bind, createEle, createLiEle, createOptionEle, createSpanEle, dom, enumerable, enumerableAndNotEnumerable, getAttrs, getBody, getPropertyName, isArray, isNull, isNumber, isObejct, notEnumerable, setEleClass, setEleContent, unbind;

      HTML = '<div id="webug-container" class="panel panel-default" style="position:fixed;bottom:0;left:0;padding-top:10px;margin:0;height=200px"> <div class="btn-group pull-right" role="group" aria-label="..."> <button id="webug-clear" type="button" class="btn btn-info"> <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span> </button> <button id="webug-close" type="button" class="btn btn-danger"> <span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span></button> </button> </div> <ul id="webug-ul" class="list-group" style="margin: 10px 0"> </ul> <div class="input-group input-group-bg"> <span class="input-group-addon ">></span> <input id="webug-input" type="text" class="form-control" placeholder="" aria-describedby="sizing-addon3"> </div> <div class="col-xs-2"> <select id="webug-select" class="form-control"> </select> </div> </div>';

      UNDEFINED = void 0;

      CLICK = 'click';

      KEYDOWN = 'keydown';

      TRUE = 'true';

      ERROR = 'error';

      INPUT = 'input';

      CHANGE = 'change';

      dom = function(ele) {
        return doc.querySelector(ele);
      };

      bind = function(ele, event, callback) {
        return ele.addEventListener(event, callback, false);
      };

      unbind = function(ele, event, callback) {
        return ele.removeEventListener(event, callback, false);
      };

      isNull = function(val) {
        return val === null;
      };

      isArray = Array.isArray;

      isNumber = function(val) {
        return !isNaN(val);
      };

      isObejct = function(val) {
        return typeof val === "object" && !isArray(val) && !isNull(val);
      };

      getBody = function() {
        return doc.body || dom("body") || dom("html");
      };

      getAttrs = function(obj) {
        var attr, tmp;
        if (!isObejct(obj)) {
          return [];
        } else {
          attr = [];
          for (tmp in obj) {
            attr.push(tmp);
          }
          console.log(obj);
          return attr;
        }
      };

      enumerable = function(obj, prop) {
        return obj.propertyIsEnumerable(prop);
      };

      notEnumerable = function(obj, prop) {
        return !obj.propertyIsEnumerable(prop);
      };

      enumerableAndNotEnumerable = function() {
        return true;
      };

      getPropertyName = function(obj, iterateSelfBool, iteratePrototypeBool, includePropCb) {
        var i, len, prop, props, ref;
        props = [];
        while (!!obj === true) {
          if (iterateSelfBool === true) {
            ref = Object.getOwnPropertyNames(obj);
            for (i = 0, len = ref.length; i < len; i++) {
              prop = ref[i];
              if (props.indexOf(prop === -1 && includePropCb(obj, prop))) {
                props.push(prop);
              }
            }
          }
          if (iteratePrototypeBool === false) {
            break;
          }
          iterateSelfBool = true;
          obj = Object.getPrototypeOf(obj);
        }
        return props;
      };

      setEleClass = function(ele, cl) {
        return ele.setAttribute('class', cl);
      };

      setEleContent = function(ele, val) {
        return ele.innerHTML = val;
      };

      createEle = function(na) {
        return doc.createElement(na);
      };

      createLiEle = function(val, nor) {
        var cl, li, sp1, sp2;
        li = createEle('li');
        li.innerHTML = '<span class="glyphicon glyphicon-menu-right"></span>';
        cl = 'list-group-item ';
        if (!nor) {
          cl += 'text-danger ';
          li.innerHTML = '<span class="glyphicon glyphicon-remove"></span>';
        }
        setEleClass(li, cl);
        sp1 = createSpanEle('');
        sp2 = createSpanEle(val);
        return li;
      };

      createOptionEle = function(val) {
        var option;
        option = createEle('option');
        return setEleContent(option, val);
      };

      createSpanEle = function(val) {
        var span;
        span = createEle('span');
        if (val === '') {
          return setEleClass(span, 'glyphicon glyphicon-menu-right');
        } else {
          setEleClass(span, 'glyphicon glyphicon-remove');
          setEleContent(span, val);
          return span;
        }
      };

      Webug.prototype.render = function(msg, console) {
        var data, error, error1;
        if (msg === '') {
          return [true, ''];
        } else {
          if (console == null) {
            this.append(true, msg);
          }
          try {
            data = eval.call(win, msg);
            return [true, isObejct(data) ? data.toString() : data];
          } catch (error1) {
            error = error1;
            return [false, error];
          }
        }
      };

      Webug.prototype.handleObject = function() {};

      Webug.prototype.append = function(trueOrErr, value) {
        var li;
        li = createLiEle(value, trueOrErr);
        this.ul.appendChild(li);
        return this.scrollBottom();
      };

      Webug.prototype.clear = function() {
        return this.ul.innerHTML = '';
      };

      Webug.prototype.show = function() {
        this.isHide = false;
        this.container.setAttribute('style', 'display: block');
        return this;
      };

      Webug.prototype.hide = function() {
        this.isHide = true;
        this.container.setAttribute('style', 'display: none');
        return this;
      };

      Webug.prototype.searchAttribute = function(val, env) {
        var array, attrs, i, key, len;
        array = [];
        attrs = getPropertyName(env, true, true, enumerableAndNotEnumerable());
        for (i = 0, len = attrs.length; i < len; i++) {
          key = attrs[i];
          if (key.indexOf(val) === 0) {
            array.push(key);
          }
        }
        return array;
      };

      Webug.prototype.appendInSelect = function(array) {
        var all, i, len, size, tmp;
        all = '';
        for (i = 0, len = array.length; i < len; i++) {
          tmp = array[i];
          all += '<option>' + tmp + '</option>';
        }
        this.select.innerHTML = all;
        if (array.length > 8) {
          size = 8;
        } else {
          size = array.length + 1;
        }
        return this.select.setAttribute('size', size);
      };

      Webug.prototype.clearSelect = function() {
        return this.select.innerHTML = '';
      };

      Webug.prototype.inputListner = function(e) {
        var env, pos, tmp, val;
        val = this.input.value;
        pos = val.lastIndexOf('.');
        if (pos === -1) {
          env = win;
          this.env = '';
        } else {
          tmp = val.substring(0, pos);
          this.env = tmp + '.';
          env = eval(tmp);
        }
        val = val.substring(pos + 1, val.length);
        return this.appendInSelect(this.searchAttribute(val, env));
      };

      Webug.prototype.errListener = function(error) {
        var msg;
        return msg = ["Error:", "filename: " + error.filename, "lineno: " + error.lineno, "message: " + error.message, "type: " + error.type];
      };

      Webug.prototype.scrollBottom = function() {
        return this.container.scrollTop = this.container.scrollHeight;
      };

      function Webug() {
        this.isInit = false;
        this.msg = '';
        this.body = getBody();
        this.stack = new Stack();
        this.init();
        this.isInit = true;
      }

      Webug.prototype.init = function() {
        var div;
        this.isHide = false;
        this.env = '';
        div = doc.createElement('div');
        div.innerHTML = HTML;
        this.body.appendChild(div);
        this.container = dom('#webug-container');
        this.btn_clear = dom('#webug-clear');
        this.btn_close = dom('#webug-close');
        this.input = dom('#webug-input');
        this.ul = dom('#webug-ul');
        this.select = dom('#webug-select');
        bind(this.btn_clear, CLICK, (function(_this) {
          return function() {
            return _this.clear();
          };
        })(this));
        bind(this.input, KEYDOWN, (function(_this) {
          return function(e) {
            var data;
            if (e.keyCode === 13) {
              _this.msg = _this.input.value;
              _this.stack.push(_this.msg);
              data = _this.render(_this.msg);
              _this.append(data[0], data[1]);
              return _this.input.value = '';
            } else if (e.keyCode === 38) {
              return _this.select.focus();
            } else if (e.keyCode === 40) {
              return _this.select.focus();
            }
          };
        })(this));
        bind(this.input, INPUT, (function(_this) {
          return function(e) {
            return _this.inputListner(e);
          };
        })(this));
        bind(this.select, KEYDOWN, (function(_this) {
          return function(e) {
            if (e.keyCode === 13) {
              _this.input.value = _this.env + _this.select.value;
              _this.input.focus();
              return _this.clearSelect();
            } else if (e.keyCode === 37) {
              _this.input.focus();
              return e.preventDefault();
            }
          };
        })(this));
        bind(this.select, CLICK, (function(_this) {
          return function(e) {
            _this.input.value = _this.select.value;
            return _this.input.focus();
          };
        })(this));
        bind(this.body, KEYDOWN, (function(_this) {
          return function(e) {
            if (e.keyCode === 88 && e.ctrlKey) {
              if (_this.isHide) {
                return _this.show();
              } else {
                return _this.hide();
              }
            }
          };
        })(this));
        bind(win, ERROR, (function(_this) {
          return function(e) {
            return _this.errListener(e);
          };
        })(this));
        win.console.log = (function(_this) {
          return function(val) {
            var data;
            data = _this.render(val, true);
            _this.append(data[0], data[1]);
            return UNDEFINED;
          };
        })(this);
        this.isInit = true;
        return this;
      };

      return Webug;

    })();
  })(window, document);

}).call(this);

//# sourceMappingURL=webug.js.map
